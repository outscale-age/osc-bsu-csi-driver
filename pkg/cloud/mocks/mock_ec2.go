// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/kubernetes-sigs/aws-ebs-csi-driver/pkg/cloud (interfaces: EC2)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	aws "github.com/aws/aws-sdk-go/aws"
	request "github.com/aws/aws-sdk-go/aws/request"
	//ec2 "github.com/aws/aws-sdk-go/service/ec2"
	gomock "github.com/golang/mock/gomock"

	"github.com/outscale/osc-sdk-go/osc"
)

// MockEC2 is a mock of EC2 interface
type MockOsc struct {
	ctrl     *gomock.Controller
	recorder *MockOscMockRecorder
}

// MockEC2MockRecorder is the mock recorder for MockEC2
type MockOscMockRecorder struct {
	mock *MockOsc
}

// NewMockEC2 creates a new mock instance
func NewMockOsc(ctrl *gomock.Controller) *MockOsc {
	mock := &MockOsc{ctrl: ctrl}
	mock.recorder = &MockOscMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockOsc) EXPECT() *MockOscMockRecorder {
	return m.recorder
}

// AttachVolumeWithContext mocks base method
func (m *MockOsc) LinkVolume(arg0 context.Context, arg1 *osc.LinkVolumeOpts, arg2 ...request.Option) (osc.LinkVolumeResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AttachVolumeWithContext", varargs...)
	ret0, _ := ret[0].(osc.LinkVolumeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AttachVolumeWithContext indicates an expected call of AttachVolumeWithContext
func (mr *MockOscMockRecorder) LinkVolume(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AttachVolumeWithContext", reflect.TypeOf((*MockOsc)(nil).LinkVolume), varargs...)
}

// CreateSnapshotWithContext mocks base method
func (m *MockOsc) CreateSnapshot(arg0 context.Context, arg1 *osc.CreateSnapshotOpts, arg2 ...request.Option) (osc.Snapshot, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateSnapshotWithContext", varargs...)
	ret0, _ := ret[0].(osc.Snapshot)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSnapshotWithContext indicates an expected call of CreateSnapshotWithContext
func (mr *MockOscMockRecorder) CreateSnapshot(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSnapshotWithContext", reflect.TypeOf((*MockOsc)(nil).CreateSnapshot), varargs...)
}

// CreateVolumeWithContext mocks base method
func (m *MockOsc) CreateVolume(arg0 context.Context, arg1 *osc.CreateVolumeOpts, arg2 ...request.Option) (osc.Volume, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateVolumeWithContext", varargs...)
	ret0, _ := ret[0].(osc.Volume)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateVolumeWithContext indicates an expected call of CreateVolumeWithContext
func (mr *MockOscMockRecorder) CreateVolume(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVolumeWithContext", reflect.TypeOf((*MockOsc)(nil).CreateVolume), varargs...)
}

// DeleteSnapshotWithContext mocks base method
func (m *MockOsc) DeleteSnapshot(arg0 context.Context, arg1 *osc.DeleteSnapshotOpts, arg2 ...request.Option) (osc.DeleteSnapshotResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteSnapshotWithContext", varargs...)
	ret0, _ := ret[0].(osc.DeleteSnapshotResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteSnapshotWithContext indicates an expected call of DeleteSnapshotWithContext
func (mr *MockOscMockRecorder) DeleteSnapshot(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSnapshotWithContext", reflect.TypeOf((*MockOsc)(nil).DeleteSnapshot), varargs...)
}

// DeleteVolumeWithContext mocks base method
func (m *MockOsc) DeleteVolume(arg0 context.Context, arg1 *osc.DeleteVolumeOpts, arg2 ...request.Option) (osc.DeleteVolumeResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteVolumeWithContext", varargs...)
	ret0, _ := ret[0].(osc.DeleteVolumeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteVolumeWithContext indicates an expected call of DeleteVolumeWithContext
func (mr *MockOscMockRecorder) DeleteVolume(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteVolumeWithContext", reflect.TypeOf((*MockOsc)(nil).DeleteVolume), varargs...)
}

// DescribeAvailabilityZonesWithContext mocks base method
func (m *MockOsc) ReadSubregions(arg0 context.Context, arg1 *osc.ReadSubregionsOpts, arg2 ...request.Option) (osc.ReadSubregionsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeAvailabilityZonesWithContext", varargs...)
	ret0, _ := ret[0].(osc.ReadSubregionsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeAvailabilityZonesWithContext indicates an expected call of DescribeAvailabilityZonesWithContext
func (mr *MockOscMockRecorder) ReadSubregions(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeAvailabilityZonesWithContext", reflect.TypeOf((*MockOsc)(nil).ReadSubregions), varargs...)
}

// DescribeInstancesWithContext mocks base method
func (m *MockOsc) ReadVms(arg0 context.Context, arg1 *osc.ReadVmsOpts, arg2 ...request.Option) (osc.ReadVmsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeInstancesWithContext", varargs...)
	ret0, _ := ret[0].(osc.ReadVmsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeInstancesWithContext indicates an expected call of DescribeInstancesWithContext
func (mr *MockOscMockRecorder) ReadVms(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeInstancesWithContext", reflect.TypeOf((*MockOsc)(nil).ReadVms), varargs...)
}

// DescribeSnapshotsWithContext mocks base method
func (m *MockOsc) ReadSnapshots(arg0 context.Context, arg1 *osc.ReadSnapshotsOpts, arg2 ...request.Option) (osc.ReadSnapshotsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeSnapshotsWithContext", varargs...)
	ret0, _ := ret[0].(osc.ReadSnapshotsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeSnapshotsWithContext indicates an expected call of DescribeSnapshotsWithContext
func (mr *MockOscMockRecorder) ReadSnapshots(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeSnapshotsWithContext", reflect.TypeOf((*MockOsc)(nil).ReadSnapshots), varargs...)
}

//Volume modification is not supported
// DescribeVolumesModificationsWithContext mocks base method
// func (m *MockOsc) DescribeVolumesModificationsWithContext(arg0 context.Context, arg1 *osc.DescribeVolumesModificationsInput, arg2 ...request.Option) (*ec2.DescribeVolumesModificationsOutput, error) {
// 	m.ctrl.T.Helper()
// 	varargs := []interface{}{arg0, arg1}
// 	for _, a := range arg2 {
// 		varargs = append(varargs, a)
// 	}
// 	ret := m.ctrl.Call(m, "DescribeVolumesModificationsWithContext", varargs...)
// 	ret0, _ := ret[0].(*ec2.DescribeVolumesModificationsOutput)
// 	ret1, _ := ret[1].(error)
// 	return ret0, ret1
// }
//
// // DescribeVolumesModificationsWithContext indicates an expected call of DescribeVolumesModificationsWithContext
// func (mr *MockOscMockRecorder) DescribeVolumesModificationsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
// 	mr.mock.ctrl.T.Helper()
// 	varargs := append([]interface{}{arg0, arg1}, arg2...)
// 	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeVolumesModificationsWithContext", reflect.TypeOf((*MockOsc)(nil).DescribeVolumesModificationsWithContext), varargs...)
// }

// DescribeVolumesWithContext mocks base method
func (m *MockOsc) ReadVolumes(arg0 context.Context, arg1 *osc.ReadVolumesOpts, arg2 ...request.Option) (osc.ReadVolumesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeVolumesWithContext", varargs...)
	ret0, _ := ret[0].(osc.ReadVolumesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeVolumesWithContext indicates an expected call of DescribeVolumesWithContext
func (mr *MockOscMockRecorder) ReadVolumes(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeVolumesWithContext", reflect.TypeOf((*MockOsc)(nil).ReadVolumes), varargs...)
}

// DetachVolumeWithContext mocks base method
func (m *MockOsc) UnlinkVolume(arg0 context.Context, arg1 *osc.UnlinkVolumeOpts, arg2 ...request.Option) (osc.UnlinkVolumeResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DetachVolumeWithContext", varargs...)
	ret0, _ := ret[0].(osc.UnlinkVolumeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DetachVolumeWithContext indicates an expected call of DetachVolumeWithContext
func (mr *MockOscMockRecorder) UnlinkVolume(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DetachVolumeWithContext", reflect.TypeOf((*MockOsc)(nil).UnlinkVolume), varargs...)
}

// Volume modification is not supported
// ModifyVolumeWithContext mocks base method
// func (m *MockOsc) ModifyVolumeWithContext(arg0 context.Context, arg1 *ec2.ModifyVolumeInput, arg2 ...request.Option) (*ec2.ModifyVolumeOutput, error) {
// 	m.ctrl.T.Helper()
// 	varargs := []interface{}{arg0, arg1}
// 	for _, a := range arg2 {
// 		varargs = append(varargs, a)
// 	}
// 	ret := m.ctrl.Call(m, "ModifyVolumeWithContext", varargs...)
// 	ret0, _ := ret[0].(*ec2.ModifyVolumeOutput)
// 	ret1, _ := ret[1].(error)
// 	return ret0, ret1
// }

// // ModifyVolumeWithContext indicates an expected call of ModifyVolumeWithContext
// func (mr *MockOscMockRecorder) ModifyVolumeWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
// 	mr.mock.ctrl.T.Helper()
// 	varargs := append([]interface{}{arg0, arg1}, arg2...)
// 	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModifyVolumeWithContext", reflect.TypeOf((*MockOsc)(nil).ModifyVolumeWithContext), varargs...)
// }

// CreateTagsWithContext mocks base method
func (m *MockOsc) CreateTags(arg0 aws.Context, arg1 *osc.CreateTagsOpts, arg2 ...request.Option) (*osc.CreateTagsResponse, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateTagsWithContext", varargs...)
	ret0, _ := ret[0].(*osc.CreateTagsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTagsWithContext indicates an expected call of CreateTagsWithContext
func (mr *MockOscMockRecorder) CreateTags(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTagsWithContext", reflect.TypeOf((*MockOsc)(nil).CreateTags), varargs...)
}
